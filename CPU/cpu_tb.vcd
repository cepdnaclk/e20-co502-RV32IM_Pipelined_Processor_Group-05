$date
	Mon Feb 17 13:05:49 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 ! \REGISTER_FILE[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 " \REGISTER_FILE[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 # \REGISTER_FILE[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 $ \REGISTER_FILE[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 % \REGISTER_FILE[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 & \REGISTER_FILE[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 ' \REGISTER_FILE[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 ( \REGISTER_FILE[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 ) \REGISTER_FILE[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 * \REGISTER_FILE[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 + \REGISTER_FILE[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 , \REGISTER_FILE[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 - \REGISTER_FILE[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 . \REGISTER_FILE[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 / \REGISTER_FILE[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 0 \REGISTER_FILE[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 1 \REGISTER_FILE[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 2 \REGISTER_FILE[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 3 \REGISTER_FILE[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 4 \REGISTER_FILE[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 5 \REGISTER_FILE[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 6 \REGISTER_FILE[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 7 \REGISTER_FILE[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 8 \REGISTER_FILE[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 9 \REGISTER_FILE[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 : \REGISTER_FILE[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 ; \REGISTER_FILE[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 < \REGISTER_FILE[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 = \REGISTER_FILE[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 > \REGISTER_FILE[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 ? \REGISTER_FILE[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$scope module cpu $end
$scope module regfile $end
$var reg 32 @ \REGISTER_FILE[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module CPU_tb $end
$var wire 32 A MEM_WRITE_DATA [31:0] $end
$var wire 1 B MEM_WRITE $end
$var wire 1 C MEM_READ $end
$var wire 32 D MEM_ADDRESS [31:0] $end
$var reg 1 E BUSYWAIT $end
$var reg 1 F CLK $end
$var reg 32 G INSTRUCTION [31:0] $end
$var reg 32 H PC [31:0] $end
$var reg 32 I READ_DATA [31:0] $end
$var reg 1 J RESET $end
$scope module cpu $end
$var wire 1 E BUSYWAIT $end
$var wire 1 F CLK $end
$var wire 32 K INSTRUCTION [31:0] $end
$var wire 32 L PC [31:0] $end
$var wire 32 M READ_DATA [31:0] $end
$var wire 1 J RESET $end
$var wire 32 N extended_imm_value_out [31:0] $end
$var wire 32 O extended_imm_value [31:0] $end
$var wire 32 P data2 [31:0] $end
$var wire 32 Q data1 [31:0] $end
$var wire 1 R WRITE_ENABLE $end
$var wire 32 S WRITE_DATA [31:0] $end
$var wire 5 T WB_ADDRESS [4:0] $end
$var wire 1 U TWOSCOMP_OUT $end
$var wire 1 V TWOSCOMP $end
$var wire 1 W REGWRITE_ENABLE_OUT2 $end
$var wire 1 X REGWRITE_ENABLE_OUT $end
$var wire 1 Y REGWRITE_ENABLE $end
$var wire 32 Z READ_DATA_OUT [31:0] $end
$var wire 5 [ RD_OUT2 [4:0] $end
$var wire 5 \ RD_OUT [4:0] $end
$var wire 32 ] PC_PLUS_FOUR_OUT2 [31:0] $end
$var wire 32 ^ PC_PLUS_FOUR_OUT [31:0] $end
$var wire 32 _ PC_PLUS_FOUR [31:0] $end
$var wire 32 ` PC_OUT2 [31:0] $end
$var wire 32 a PC_OUT [31:0] $end
$var wire 32 b OUT2_TWOSCOMP [31:0] $end
$var wire 32 c OUT2 [31:0] $end
$var wire 32 d OUT1 [31:0] $end
$var wire 1 e MUX3_SELECT_OUT3 $end
$var wire 1 f MUX3_SELECT_OUT2 $end
$var wire 1 g MUX3_SELECT_OUT $end
$var wire 1 h MUX3_SELECT $end
$var wire 1 i MUX2_SELECT_OUT $end
$var wire 1 j MUX2_SELECT $end
$var wire 1 k MUX1_SELECT_OUT $end
$var wire 1 l MUX1_SELECT $end
$var wire 32 m MEM_WRITE_DATA [31:0] $end
$var wire 1 B MEM_WRITE $end
$var wire 1 C MEM_READ $end
$var wire 1 n MEMWRITE_OUT $end
$var wire 1 o MEMWRITE $end
$var wire 1 p MEMREAD_OUT $end
$var wire 1 q MEMREAD $end
$var wire 1 r JUMP_OUT $end
$var wire 1 s JUMP $end
$var wire 32 t JAL_RESULT3 [31:0] $end
$var wire 32 u JAL_RESULT2 [31:0] $end
$var wire 32 v JAL_RESULT [31:0] $end
$var wire 1 w JAL_OUT $end
$var wire 1 x JAL $end
$var wire 32 y INSTRUCTION_OUT [31:0] $end
$var wire 3 z IMMEDIATE [2:0] $end
$var wire 3 { FUNC3_OUT2 [2:0] $end
$var wire 3 | FUNC3_OUT [2:0] $end
$var wire 32 } DATA2_OUT [31:0] $end
$var wire 32 ~ DATA2 [31:0] $end
$var wire 32 !" DATA1_OUT [31:0] $end
$var wire 32 "" DATA1 [31:0] $end
$var wire 1 #" BRANCH_OUT $end
$var wire 1 $" BRANCH $end
$var wire 1 %" ALU_ZERO $end
$var wire 32 &" ALU_RESULT [31:0] $end
$var wire 5 '" ALUOP_OUT [4:0] $end
$var wire 5 (" ALUOP [4:0] $end
$var reg 32 )" MEM_ADDRESS [31:0] $end
$scope module EX_MEMREG $end
$var wire 1 E BUSYWAIT $end
$var wire 1 F CLK $end
$var wire 1 J RESET $end
$var wire 1 X REGWRITE_ENABLE_IN $end
$var wire 5 *" RD_IN [4:0] $end
$var wire 1 g MUX3_SELECT_IN $end
$var wire 1 n MEM_WRITE_IN $end
$var wire 1 p MEM_READ_IN $end
$var wire 3 +" FUNC3_IN [2:0] $end
$var wire 32 ," DATA2_IN [31:0] $end
$var wire 32 -" ALUUD_IN [31:0] $end
$var reg 32 ." ALUUD_OUT [31:0] $end
$var reg 32 /" DATA2_OUT [31:0] $end
$var reg 3 0" FUNC3_OUT [2:0] $end
$var reg 1 C MEM_READ_OUT $end
$var reg 1 B MEM_WRITE_OUT $end
$var reg 1 f MUX3_SELECT_OUT $end
$var reg 5 1" RD_OUT [4:0] $end
$var reg 1 W REGWRITE_ENABLE_OUT $end
$upscope $end
$scope module FU $end
$var wire 32 2" MEM_WB_data [31:0] $end
$var wire 5 3" rd2 [4:0] $end
$var wire 5 4" rs1 [4:0] $end
$var wire 5 5" rs2 [4:0] $end
$var wire 5 6" rd1 [4:0] $end
$var wire 32 7" data2 [31:0] $end
$var wire 32 8" data1 [31:0] $end
$var wire 32 9" EX_MEM_data [31:0] $end
$var reg 32 :" rs1_out [31:0] $end
$var reg 32 ;" rs2_out [31:0] $end
$upscope $end
$scope module ID_EXREG $end
$var wire 1 E BUSYWAIT $end
$var wire 1 F CLK $end
$var wire 32 <" DATA1_IN [31:0] $end
$var wire 32 =" DATA2_IN [31:0] $end
$var wire 3 >" FUNC3_IN [2:0] $end
$var wire 5 ?" RD_IN [4:0] $end
$var wire 1 J RESET $end
$var wire 1 V TWOSCOMP_IN $end
$var wire 1 Y REGWRITE_IN $end
$var wire 32 @" PC_PLUS_FOUR_IN [31:0] $end
$var wire 32 A" PC_IN [31:0] $end
$var wire 1 h MUX3_IN $end
$var wire 1 j MUX2_IN $end
$var wire 1 l MUX1_IN $end
$var wire 1 o MEMWRITE_IN $end
$var wire 1 q MEMREAD_IN $end
$var wire 1 s JUMP_IN $end
$var wire 1 x JAL_IN $end
$var wire 32 B" IMM_IN [31:0] $end
$var wire 1 $" BRANCH_IN $end
$var wire 5 C" ALU_IN [4:0] $end
$var reg 5 D" ALU_OUT [4:0] $end
$var reg 1 #" BRANCH_OUT $end
$var reg 32 E" DATA1_OUT [31:0] $end
$var reg 32 F" DATA2_OUT [31:0] $end
$var reg 3 G" FUNC3_OUT [2:0] $end
$var reg 32 H" IMM_OUT [31:0] $end
$var reg 1 w JAL_OUT $end
$var reg 1 r JUMP_OUT $end
$var reg 1 p MEMREAD_OUT $end
$var reg 1 n MEMWRITE_OUT $end
$var reg 1 k MUX1_OUT $end
$var reg 1 i MUX2_OUT $end
$var reg 1 g MUX3_OUT $end
$var reg 32 I" PC_OUT [31:0] $end
$var reg 32 J" PC_PLUS_FOUR_OUT [31:0] $end
$var reg 5 K" RD_OUT [4:0] $end
$var reg 1 X REGWRITE_OUT $end
$var reg 1 U TWOSCOMP_OUT $end
$upscope $end
$scope module IF_IDREG $end
$var wire 1 E BUSYWAIT $end
$var wire 1 F CLK $end
$var wire 32 L" INSTRUCTION_IN [31:0] $end
$var wire 32 M" PC_IN [31:0] $end
$var wire 1 J RESET $end
$var wire 32 N" PC_PLUS_FOUR_IN [31:0] $end
$var reg 32 O" INSTRUCTION_OUT [31:0] $end
$var reg 32 P" PC_OUT [31:0] $end
$var reg 32 Q" PC_PLUS_FOUR_OUT [31:0] $end
$upscope $end
$scope module JAL_MUX $end
$var wire 32 R" IN1 [31:0] $end
$var wire 1 w SELECT $end
$var wire 32 S" IN0 [31:0] $end
$var reg 32 T" OUT [31:0] $end
$upscope $end
$scope module MEM_WBREG $end
$var wire 32 U" ALUOUT_IN [31:0] $end
$var wire 1 E BUSYWAIT $end
$var wire 1 F CLK $end
$var wire 32 V" MEM_IN [31:0] $end
$var wire 1 f MUX3_SELECT_IN $end
$var wire 5 W" RD_IN [4:0] $end
$var wire 1 W REGWRITE_ENABLE_IN $end
$var wire 1 J RESET $end
$var reg 32 X" ALUOUT_OUT [31:0] $end
$var reg 32 Y" MEM_OUT [31:0] $end
$var reg 1 e MUX3_SELECT_OUT $end
$var reg 5 Z" RD_OUT [4:0] $end
$var reg 1 R REGWRITE_ENABLE_OUT $end
$upscope $end
$scope module MUX3 $end
$var wire 32 [" IN0 [31:0] $end
$var wire 32 \" IN1 [31:0] $end
$var wire 1 e SELECT $end
$var reg 32 ]" OUT [31:0] $end
$upscope $end
$scope module adder $end
$var wire 32 ^" IN1 [31:0] $end
$var wire 32 _" OUT [31:0] $end
$upscope $end
$scope module alu $end
$var wire 5 `" SELECT [4:0] $end
$var wire 32 a" Result_xor [31:0] $end
$var wire 32 b" Result_srl [31:0] $end
$var wire 32 c" Result_sltu [31:0] $end
$var wire 32 d" Result_slt [31:0] $end
$var wire 32 e" Result_sll [31:0] $end
$var wire 32 f" Result_remu [31:0] $end
$var wire 32 g" Result_rem [31:0] $end
$var wire 32 h" Result_or [31:0] $end
$var wire 32 i" Result_mulhu [31:0] $end
$var wire 32 j" Result_mulhsu [31:0] $end
$var wire 32 k" Result_mulh [31:0] $end
$var wire 32 l" Result_mul [31:0] $end
$var wire 32 m" Result_div [31:0] $end
$var wire 32 n" Result_and [31:0] $end
$var wire 32 o" Result_add [31:0] $end
$var wire 32 p" DATA2 [31:0] $end
$var wire 32 q" DATA1 [31:0] $end
$var reg 32 r" RESULT [31:0] $end
$var reg 1 %" ZERO $end
$scope module add0 $end
$var wire 32 s" result [31:0] $end
$var wire 32 t" operand_B [31:0] $end
$var wire 32 u" operand_A [31:0] $end
$upscope $end
$scope module and0 $end
$var wire 32 v" result [31:0] $end
$var wire 32 w" operand_B [31:0] $end
$var wire 32 x" operand_A [31:0] $end
$upscope $end
$scope module div0 $end
$var wire 32 y" result [31:0] $end
$var wire 32 z" operand_B [31:0] $end
$var wire 32 {" operand_A [31:0] $end
$upscope $end
$scope module mul0 $end
$var wire 32 |" result [31:0] $end
$var wire 64 }" product [63:0] $end
$var wire 32 ~" operand_B [31:0] $end
$var wire 32 !# operand_A [31:0] $end
$upscope $end
$scope module mulh0 $end
$var wire 32 "# result [31:0] $end
$var wire 64 ## product [63:0] $end
$var wire 32 $# operand_B [31:0] $end
$var wire 32 %# operand_A [31:0] $end
$upscope $end
$scope module mulhsu0 $end
$var wire 32 &# result [31:0] $end
$var wire 64 '# product [63:0] $end
$var wire 32 (# operand_B [31:0] $end
$var wire 32 )# operand_A [31:0] $end
$upscope $end
$scope module mulhu0 $end
$var wire 32 *# result [31:0] $end
$var wire 64 +# product [63:0] $end
$var wire 32 ,# operand_B [31:0] $end
$var wire 32 -# operand_A [31:0] $end
$upscope $end
$scope module or0 $end
$var wire 32 .# result [31:0] $end
$var wire 32 /# operand_B [31:0] $end
$var wire 32 0# operand_A [31:0] $end
$upscope $end
$scope module rem0 $end
$var wire 32 1# result [31:0] $end
$var wire 32 2# operand_B [31:0] $end
$var wire 32 3# operand_A [31:0] $end
$upscope $end
$scope module remu0 $end
$var wire 32 4# result [31:0] $end
$var wire 32 5# operand_B [31:0] $end
$var wire 32 6# operand_A [31:0] $end
$upscope $end
$scope module sll0 $end
$var wire 32 7# result [31:0] $end
$var wire 32 8# operand_B [31:0] $end
$var wire 32 9# operand_A [31:0] $end
$upscope $end
$scope module slt0 $end
$var wire 32 :# result [31:0] $end
$var wire 32 ;# operand_B [31:0] $end
$var wire 32 <# operand_A [31:0] $end
$upscope $end
$scope module sltu0 $end
$var wire 32 =# result [31:0] $end
$var wire 32 ># operand_B [31:0] $end
$var wire 32 ?# operand_A [31:0] $end
$upscope $end
$scope module srl0 $end
$var wire 32 @# result [31:0] $end
$var wire 32 A# operand_B [31:0] $end
$var wire 32 B# operand_A [31:0] $end
$upscope $end
$scope module xor0 $end
$var wire 32 C# result [31:0] $end
$var wire 32 D# operand_B [31:0] $end
$var wire 32 E# operand_A [31:0] $end
$upscope $end
$upscope $end
$scope module cu $end
$var wire 32 F# INSTRUCTION [31:0] $end
$var reg 5 G# ALUOP [4:0] $end
$var reg 1 $" BRANCH $end
$var reg 3 H# FUNCT3 [2:0] $end
$var reg 7 I# FUNCT7 [6:0] $end
$var reg 3 J# IMMEDIATE [2:0] $end
$var reg 1 x JAL $end
$var reg 1 s JUMP $end
$var reg 1 q MEMORYREAD $end
$var reg 1 o MEMORYWRITE $end
$var reg 1 l MUX1 $end
$var reg 1 j MUX2 $end
$var reg 1 h MUX3 $end
$var reg 8 K# OPCODE [7:0] $end
$var reg 1 Y REGISTERWRITE $end
$var reg 1 V TWOSCOMP $end
$upscope $end
$scope module immex $end
$var wire 3 L# imm_select [2:0] $end
$var wire 32 M# imm_value [31:0] $end
$var wire 20 N# U_imm [19:0] $end
$var wire 5 O# S_imm_2 [4:0] $end
$var wire 7 P# S_imm_1 [6:0] $end
$var wire 10 Q# J_imm_4 [9:0] $end
$var wire 1 R# J_imm_3 $end
$var wire 8 S# J_imm_2 [7:0] $end
$var wire 1 T# J_imm_1 $end
$var wire 12 U# I_imm [11:0] $end
$var wire 4 V# B_imm_4 [3:0] $end
$var wire 6 W# B_imm_3 [5:0] $end
$var wire 1 X# B_imm_2 $end
$var wire 1 Y# B_imm_1 $end
$var reg 32 Z# extended_imm_value [31:0] $end
$upscope $end
$scope module mux1 $end
$var wire 32 [# IN0 [31:0] $end
$var wire 32 \# IN1 [31:0] $end
$var wire 1 k SELECT $end
$var reg 32 ]# OUT [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 ^# IN0 [31:0] $end
$var wire 32 _# IN1 [31:0] $end
$var wire 1 i SELECT $end
$var reg 32 `# OUT [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 a# ADRS1 [4:0] $end
$var wire 5 b# ADRS2 [4:0] $end
$var wire 1 F CLK $end
$var wire 32 c# DATA_OUT1 [31:0] $end
$var wire 32 d# DATA_OUT2 [31:0] $end
$var wire 1 J RESET $end
$var wire 5 e# WB_ADDRESS [4:0] $end
$var wire 32 f# WRITE_DATA [31:0] $end
$var wire 1 R WRITE_ENABLE $end
$var reg 32 g# DATA1 [31:0] $end
$var reg 32 h# DATA2 [31:0] $end
$var integer 32 i# i [31:0] $end
$upscope $end
$scope module twos_complement $end
$var wire 32 j# DATA2 [31:0] $end
$var wire 1 U select $end
$var reg 32 k# DATA2_OUT [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx k#
bx j#
b100000 i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
b0 _#
bx ^#
b0 ]#
b0 \#
b0 [#
bx Z#
xY#
xX#
bx W#
bx V#
bx U#
xT#
bx S#
xR#
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
bx K#
bx J#
bx I#
bx H#
bx G#
bx F#
b0 E#
bx D#
bx C#
b0 B#
bx A#
bx @#
b0 ?#
bx >#
bx =#
b0 <#
bx ;#
bx :#
b0 9#
bx 8#
bx 7#
b0 6#
bx 5#
bx 4#
b0 3#
bx 2#
bx 1#
b0 0#
bx /#
bx .#
b0 -#
bx ,#
bx +#
bx *#
b0 )#
bx (#
bx '#
bx &#
b0 %#
bx $#
bx ##
bx "#
b0 !#
bx ~"
bx }"
bx |"
b0 {"
bx z"
bx y"
b0 x"
bx w"
bx v"
b0 u"
bx t"
bx s"
bx r"
b0 q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
b0 `"
bx _"
b0 ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
b0 V"
bx U"
bx T"
bx S"
b0 R"
bx Q"
bx P"
bx O"
bx N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
b0 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
b0 ,"
b0 +"
b0 *"
bx )"
bx ("
b0 '"
bx &"
x%"
x$"
0#"
bx ""
b0 !"
bx ~
b0 }
b0 |
bx {
bx z
bx y
xx
0w
bx v
bx u
bx t
xs
0r
xq
0p
xo
0n
bx m
xl
0k
xj
0i
xh
0g
xf
xe
b0 d
bx c
bx b
bx a
b0 `
bx _
bx ^
b0 ]
b0 \
bx [
bx Z
xY
0X
xW
xV
0U
bx T
bx S
xR
bx Q
bx P
bx O
b0 N
b0 M
b0 L
b0 K
1J
b0 I
b0 H
b0 G
0F
0E
bx D
xC
xB
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#10
b100 _
b100 N"
b100 _"
#20
b0 n"
b0 v"
b0x c"
b0x =#
b0x d"
b0x :#
#50
b0 P
b0 7"
b0 d#
b0 h#
b0 Q
b0 8"
b0 c#
b0 g#
b11111 @
b11110 ?
b11101 >
b11100 =
b11011 <
b11010 ;
b11001 :
b11000 9
b10111 8
b10110 7
b10101 6
b10100 5
b10011 4
b10010 3
b10001 2
b10000 1
b1111 0
b1110 /
b1101 .
b1100 -
b1011 ,
b1010 +
b1001 *
b1000 )
b111 (
b110 '
b101 &
b100 %
b11 $
b10 #
b1 "
b0 !
b0 b
b0 p"
b0 t"
b0 w"
b0 z"
b0 ~"
b0 $#
b0 (#
b0 ,#
b0 /#
b0 2#
b0 5#
b0 8#
b0 ;#
b0 >#
b0 A#
b0 D#
b0 k#
b0 c
b0 `#
b0 j#
b0 O
b0 B"
b0 Z#
b0 ^#
b0 I#
b0 H#
b0 K#
b0 N#
b0 U#
b0 P#
b0 O#
0Y#
0X#
b0 W#
b0 V#
0T#
b0 S#
0R#
b0 Q#
b0 5"
b0 4"
b0 ?"
b0 >"
b0 b#
b0 a#
b0 D
b0 )"
b0 S
b0 ]"
b0 f#
b0 y
b0 O"
b0 F#
b0 M#
b0 ^
b0 @"
b0 Q"
b0 a
b0 A"
b0 P"
b100000 i#
b0 [
b0 1"
b0 3"
b0 W"
b0 {
b0 0"
b0 A
b0 m
b0 /"
b0 u
b0 ."
b0 2"
b0 U"
0W
0f
0C
b0 T
b0 Z"
b0 e#
b0 Z
b0 Y"
b0 \"
b0 t
b0 X"
b0 ["
0R
0e
1F
#70
b0 ~
b0 ;"
b0 ="
b0 ""
b0 :"
b0 <"
b0 v
b0 -"
b0 9"
b0 T"
b0 i"
b0 *#
b0 j"
b0 &#
b0 k"
b0 "#
b0 l"
b0 |"
1%"
b0 &"
b0 S"
b0 r"
b0 a"
b0 C#
b0 c"
b0 =#
b0 d"
b0 :#
b0 h"
b0 .#
b0 b"
b0 @#
b0 e"
b0 7#
b0 +#
b0 '#
b0 ##
b0 }"
b0 o"
b0 s"
#100
0F
0J
#150
1F
#170
0B
xU
xw
xr
x#"
xp
xn
xX
xg
xi
xk
bx '"
bx D"
bx `"
b100 ^
b100 @"
b100 Q"
#200
0F
b1000001000001100110011 G
b1000001000001100110011 K
b1000001000001100110011 L"
b100 H
b100 L
b100 M"
b100 ^"
#210
b1000 _
b1000 N"
b1000 _"
#250
1F
#270
b1000001000000000000000 b
b1000001000000000000000 p"
b1000001000000000000000 t"
b1000001000000000000000 w"
b1000001000000000000000 z"
b1000001000000000000000 ~"
b1000001000000000000000 $#
b1000001000000000000000 (#
b1000001000000000000000 ,#
b1000001000000000000000 /#
b1000001000000000000000 2#
b1000001000000000000000 5#
b1000001000000000000000 8#
b1000001000000000000000 ;#
b1000001000000000000000 >#
b1000001000000000000000 A#
b1000001000000000000000 D#
b1000001000000000000000 k#
b1000001000000000000000 c
b1000001000000000000000 `#
b1000001000000000000000 j#
b1000001000000000000000 O
b1000001000000000000000 B"
b1000001000000000000000 Z#
b1000001000000000000000 ^#
b10 ~
b10 ;"
b10 ="
b1 ""
b1 :"
b1 <"
b10 P
b10 7"
b10 d#
b10 h#
b1 Q
b1 8"
b1 c#
b1 g#
0V
b0 z
b0 J#
b0 L#
0x
0s
0$"
0q
0o
1Y
0h
1j
1l
b0 ("
b0 C"
b0 G#
b110011 K#
b1000001000 N#
b10 U#
b110 O#
b11 V#
b1000 S#
b1 Q#
b10 5"
b1 4"
b110 ?"
b10 b#
b1 a#
b100 a
b100 A"
b100 P"
b1000 ^
b1000 @"
b1000 Q"
b1000001000001100110011 y
b1000001000001100110011 O"
b1000001000001100110011 F#
b1000001000001100110011 M#
b100 ]
b100 J"
b100 R"
xW
xf
xB
xC
#290
b1000001000000000000000 a"
b1000001000000000000000 C#
b1 c"
b1 =#
b1 d"
b1 :#
b1000001000000000000000 h"
b1000001000000000000000 .#
b0 f"
b0 4#
b0 g"
b0 1#
b0 m"
b0 y"
b1000001000000000000000 o"
b1000001000000000000000 s"
#300
0F
b1000000010100110000001000110011 G
b1000000010100110000001000110011 K
b1000000010100110000001000110011 L"
b1000 H
b1000 L
b1000 M"
b1000 ^"
#310
b1100 _
b1100 N"
b1100 _"
#350
1F
#370
b101 ~
b101 ;"
b101 ="
b1000001000000000000000 v
b1000001000000000000000 -"
b1000001000000000000000 9"
b1000001000000000000000 T"
b1000000010100110000000000000000 O
b1000000010100110000000000000000 B"
b1000000010100110000000000000000 Z#
b1000000010100110000000000000000 ^#
b101 P
b101 7"
b101 d#
b101 h#
b110 Q
b110 8"
b110 c#
b110 g#
b10 b
b10 p"
b10 t"
b10 w"
b10 z"
b10 ~"
b10 $#
b10 (#
b10 ,#
b10 /#
b10 2#
b10 5#
b10 8#
b10 ;#
b10 >#
b10 A#
b10 D#
b10 k#
b1000001000000000000000 &"
b1000001000000000000000 S"
b1000001000000000000000 r"
b1000001000000000000000 ""
b1000001000000000000000 :"
b1000001000000000000000 <"
b10 c
b10 `#
b10 j#
b1 d
b1 q"
b1 u"
b1 x"
b1 {"
b1 !#
b1 %#
b1 )#
b1 -#
b1 0#
b1 3#
b1 6#
b1 9#
b1 <#
b1 ?#
b1 B#
b1 E#
b1 ]#
1V
b100000 I#
b1000000010100110000 N#
b10000000101 U#
b100000 P#
b100 O#
b100000 W#
b10 V#
b110000 S#
1R#
b1000000010 Q#
b101 5"
b110 4"
b100 ?"
b101 b#
b110 a#
xR
xe
0U
0w
0r
0#"
0p
0n
1X
0g
1i
1k
b0 '"
b0 D"
b0 `"
b110 \
b110 *"
b110 6"
b110 K"
b10 }
b10 ,"
b10 F"
b10 _#
b1 !"
b1 E"
b1 \#
b100 `
b100 I"
b100 [#
b1000 ]
b1000 J"
b1000 R"
b1000001000000000000000 N
b1000001000000000000000 H"
b1000 a
b1000 A"
b1000 P"
b1100 ^
b1100 @"
b1100 Q"
b1000000010100110000001000110011 y
b1000000010100110000001000110011 O"
b1000000010100110000001000110011 F#
b1000000010100110000001000110011 M#
#390
b11 ""
b11 :"
b11 <"
b11 v
b11 -"
b11 9"
b11 T"
b10 l"
b10 |"
b11 &"
b11 S"
b11 r"
b11 a"
b11 C#
b11 h"
b11 .#
b100 e"
b100 7#
b1 f"
b1 4#
b1 g"
b1 1#
b10 +#
b10 '#
b10 ##
b10 }"
b11 o"
b11 s"
#400
0F
#450
1F
#470
b11111111111111111111111111111011 b
b11111111111111111111111111111011 p"
b11111111111111111111111111111011 t"
b11111111111111111111111111111011 w"
b11111111111111111111111111111011 z"
b11111111111111111111111111111011 ~"
b11111111111111111111111111111011 $#
b11111111111111111111111111111011 (#
b11111111111111111111111111111011 ,#
b11111111111111111111111111111011 /#
b11111111111111111111111111111011 2#
b11111111111111111111111111111011 5#
b11111111111111111111111111111011 8#
b11111111111111111111111111111011 ;#
b11111111111111111111111111111011 >#
b11111111111111111111111111111011 A#
b11111111111111111111111111111011 D#
b11111111111111111111111111111011 k#
b101 c
b101 `#
b101 j#
b11 d
b11 q"
b11 u"
b11 x"
b11 {"
b11 !#
b11 %#
b11 )#
b11 -#
b11 0#
b11 3#
b11 6#
b11 9#
b11 <#
b11 ?#
b11 B#
b11 E#
b11 ]#
b11 D
b11 )"
1U
b100 \
b100 *"
b100 6"
b100 K"
b101 }
b101 ,"
b101 F"
b101 _#
b11 !"
b11 E"
b11 \#
b1000 `
b1000 I"
b1000 [#
b1100 ]
b1100 J"
b1100 R"
b1000000010100110000000000000000 N
b1000000010100110000000000000000 H"
b110 [
b110 1"
b110 3"
b110 W"
b10 A
b10 m
b10 /"
b11 u
b11 ."
b11 2"
b11 U"
1W
0f
0B
0C
#490
b11111111111111111111111111111110 v
b11111111111111111111111111111110 -"
b11111111111111111111111111111110 9"
b11111111111111111111111111111110 T"
b10 i"
b10 *#
b10 j"
b10 &#
b11111111111111111111111111111111 k"
b11111111111111111111111111111111 "#
b11111111111111111111111111110001 l"
b11111111111111111111111111110001 |"
b11111111111111111111111111111110 &"
b11111111111111111111111111111110 S"
b11111111111111111111111111111110 r"
b11111111111111111111111111111000 a"
b11111111111111111111111111111000 C#
b0 d"
b0 :#
b11111111111111111111111111111011 h"
b11111111111111111111111111111011 .#
b11 n"
b11 v"
b11 f"
b11 4#
b11 g"
b11 1#
b0 e"
b0 7#
b1011111111111111111111111111110001 +#
b1011111111111111111111111111110001 '#
b1111111111111111111111111111111111111111111111111111111111110001 ##
b1011111111111111111111111111110001 }"
b11111111111111111111111111111110 o"
b11111111111111111111111111111110 s"
#500
0F
#550
1F
#570
b11 S
b11 ]"
b11 f#
b110 ""
b110 :"
b110 <"
b11111111111111111111111111111110 D
b11111111111111111111111111111110 )"
b110 T
b110 Z"
b110 e#
b11 t
b11 X"
b11 ["
1R
0e
b100 [
b100 1"
b100 3"
b100 W"
b101 A
b101 m
b101 /"
b11111111111111111111111111111110 u
b11111111111111111111111111111110 ."
b11111111111111111111111111111110 2"
b11111111111111111111111111111110 U"
#600
0F
#650
b11 ""
b11 :"
b11 <"
b11 Q
b11 8"
b11 c#
b11 g#
b11 '
1F
#670
b11111111111111111111111111111110 S
b11111111111111111111111111111110 ]"
b11111111111111111111111111111110 f#
b100 T
b100 Z"
b100 e#
b11111111111111111111111111111110 t
b11111111111111111111111111111110 X"
b11111111111111111111111111111110 ["
#700
0F
#750
b11111111111111111111111111111110 %
1F
#800
0F
#850
b11111111111111111111111111111110 %
1F
#900
0F
#950
b11111111111111111111111111111110 %
1F
#1000
0F
#1050
b11111111111111111111111111111110 %
1F
#1100
0F
#1150
b11111111111111111111111111111110 %
1F
#1200
0F
#1250
b11111111111111111111111111111110 %
1F
#1300
0F
